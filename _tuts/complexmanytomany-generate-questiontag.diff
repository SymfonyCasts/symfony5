diff --git a/src/Entity/Question.php b/src/Entity/Question.php
index 762ca173..3d8dcb9d 100644
--- a/src/Entity/Question.php
+++ b/src/Entity/Question.php
@@ -57,9 +57,15 @@ class Question
      */
     private $answers;
 
+    /**
+     * @ORM\OneToMany(targetEntity=QuestionTag::class, mappedBy="question")
+     */
+    private $questionTags;
+
     public function __construct()
     {
         $this->answers = new ArrayCollection();
+        $this->questionTags = new ArrayCollection();
     }
 
     public function getId(): ?int
@@ -182,4 +188,34 @@ class Question
 
         return $this;
     }
+
+    /**
+     * @return Collection|QuestionTag[]
+     */
+    public function getQuestionTags(): Collection
+    {
+        return $this->questionTags;
+    }
+
+    public function addQuestionTag(QuestionTag $questionTag): self
+    {
+        if (!$this->questionTags->contains($questionTag)) {
+            $this->questionTags[] = $questionTag;
+            $questionTag->setQuestion($this);
+        }
+
+        return $this;
+    }
+
+    public function removeQuestionTag(QuestionTag $questionTag): self
+    {
+        if ($this->questionTags->removeElement($questionTag)) {
+            // set the owning side to null (unless already changed)
+            if ($questionTag->getQuestion() === $this) {
+                $questionTag->setQuestion(null);
+            }
+        }
+
+        return $this;
+    }
 }
diff --git a/src/Entity/QuestionTag.php b/src/Entity/QuestionTag.php
new file mode 100644
index 00000000..7a46e9e6
--- /dev/null
+++ b/src/Entity/QuestionTag.php
@@ -0,0 +1,77 @@
+<?php
+
+namespace App\Entity;
+
+use App\Repository\QuestionTagRepository;
+use Doctrine\ORM\Mapping as ORM;
+
+/**
+ * @ORM\Entity(repositoryClass=QuestionTagRepository::class)
+ */
+class QuestionTag
+{
+    /**
+     * @ORM\Id
+     * @ORM\GeneratedValue
+     * @ORM\Column(type="integer")
+     */
+    private $id;
+
+    /**
+     * @ORM\ManyToOne(targetEntity=Question::class, inversedBy="questionTags")
+     * @ORM\JoinColumn(nullable=false)
+     */
+    private $question;
+
+    /**
+     * @ORM\ManyToOne(targetEntity=Tag::class)
+     * @ORM\JoinColumn(nullable=false)
+     */
+    private $tag;
+
+    /**
+     * @ORM\Column(type="datetime_immutable")
+     */
+    private $taggedAt;
+
+    public function getId(): ?int
+    {
+        return $this->id;
+    }
+
+    public function getQuestion(): ?Question
+    {
+        return $this->question;
+    }
+
+    public function setQuestion(?Question $question): self
+    {
+        $this->question = $question;
+
+        return $this;
+    }
+
+    public function getTag(): ?Tag
+    {
+        return $this->tag;
+    }
+
+    public function setTag(?Tag $tag): self
+    {
+        $this->tag = $tag;
+
+        return $this;
+    }
+
+    public function getTaggedAt(): ?\DateTimeImmutable
+    {
+        return $this->taggedAt;
+    }
+
+    public function setTaggedAt(\DateTimeImmutable $taggedAt): self
+    {
+        $this->taggedAt = $taggedAt;
+
+        return $this;
+    }
+}
diff --git a/src/Repository/QuestionTagRepository.php b/src/Repository/QuestionTagRepository.php
new file mode 100644
index 00000000..31bbe668
--- /dev/null
+++ b/src/Repository/QuestionTagRepository.php
@@ -0,0 +1,50 @@
+<?php
+
+namespace App\Repository;
+
+use App\Entity\QuestionTag;
+use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
+use Doctrine\Persistence\ManagerRegistry;
+
+/**
+ * @method QuestionTag|null find($id, $lockMode = null, $lockVersion = null)
+ * @method QuestionTag|null findOneBy(array $criteria, array $orderBy = null)
+ * @method QuestionTag[]    findAll()
+ * @method QuestionTag[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
+ */
+class QuestionTagRepository extends ServiceEntityRepository
+{
+    public function __construct(ManagerRegistry $registry)
+    {
+        parent::__construct($registry, QuestionTag::class);
+    }
+
+    // /**
+    //  * @return QuestionTag[] Returns an array of QuestionTag objects
+    //  */
+    /*
+    public function findByExampleField($value)
+    {
+        return $this->createQueryBuilder('q')
+            ->andWhere('q.exampleField = :val')
+            ->setParameter('val', $value)
+            ->orderBy('q.id', 'ASC')
+            ->setMaxResults(10)
+            ->getQuery()
+            ->getResult()
+        ;
+    }
+    */
+
+    /*
+    public function findOneBySomeField($value): ?QuestionTag
+    {
+        return $this->createQueryBuilder('q')
+            ->andWhere('q.exampleField = :val')
+            ->setParameter('val', $value)
+            ->getQuery()
+            ->getOneOrNullResult()
+        ;
+    }
+    */
+}
