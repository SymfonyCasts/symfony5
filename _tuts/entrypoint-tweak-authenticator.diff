diff --git a/src/Security/DummyAuthenticator.php b/src/Security/DummyAuthenticator.php
index 863e66c..d4ce25b 100644
--- a/src/Security/DummyAuthenticator.php
+++ b/src/Security/DummyAuthenticator.php
@@ -8,8 +8,9 @@ use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
 use Symfony\Component\Security\Core\Exception\AuthenticationException;
 use Symfony\Component\Security\Http\Authenticator\AbstractAuthenticator;
 use Symfony\Component\Security\Http\Authenticator\Passport\PassportInterface;
+use Symfony\Component\Security\Http\EntryPoint\AuthenticationEntryPointInterface;
 
-class DummyAuthenticator extends AbstractAuthenticator
+class DummyAuthenticator extends AbstractAuthenticator implements AuthenticationEntryPointInterface
 {
     public function supports(Request $request): ?bool
     {
@@ -31,14 +32,8 @@ class DummyAuthenticator extends AbstractAuthenticator
         // TODO: Implement onAuthenticationFailure() method.
     }
 
-//    public function start(Request $request, AuthenticationException $authException = null): Response
-//    {
-//        /*
-//         * If you would like this class to control what happens when an anonymous user accesses a
-//         * protected page (e.g. redirect to /login), uncomment this method and make this class
-//         * implement Symfony\Component\Security\Http\EntryPoint\AuthenticationEntrypointInterface.
-//         *
-//         * For more details, see https://symfony.com/doc/current/security/experimental_authenticators.html#configuring-the-authentication-entry-point
-//         */
-//    }
+    public function start(Request $request, AuthenticationException $authException = null): Response
+    {
+        dd('DummyAuthenticator::start()!');
+    }
 }
