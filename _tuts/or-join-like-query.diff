diff --git a/src/Controller/AnswerController.php b/src/Controller/AnswerController.php
index 7521c414..f7932e39 100644
--- a/src/Controller/AnswerController.php
+++ b/src/Controller/AnswerController.php
@@ -15,9 +15,11 @@ class AnswerController extends AbstractController
     /**
      * @Route("/answers/popular", name="app_popular_answers")
      */
-    public function popularAnswers(AnswerRepository $answerRepository)
+    public function popularAnswers(AnswerRepository $answerRepository, Request $request)
     {
-        $answers = $answerRepository->findMostPopular();
+        $answers = $answerRepository->findMostPopular(
+            $request->query->get('q')
+        );
 
         return $this->render('answer/popularAnswers.html.twig', [
             'answers' => $answers
diff --git a/src/Repository/AnswerRepository.php b/src/Repository/AnswerRepository.php
index 622e4c76..14c4b6a9 100644
--- a/src/Repository/AnswerRepository.php
+++ b/src/Repository/AnswerRepository.php
@@ -41,15 +41,22 @@ class AnswerRepository extends ServiceEntityRepository
     /**
      * @return Answer[] Returns an array of Answer objects
      */
-   public function findMostPopular(): array
-   {
-       return $this->createQueryBuilder('answer')
-           ->addCriteria(self::createApprovedCriteria())
-           ->orderBy('answer.votes', 'DESC')
-           ->innerJoin('answer.question', 'question')
-           ->addSelect('question')
-           ->setMaxResults(10)
-           ->getQuery()
-           ->getResult();
-   }
+    public function findMostPopular(string $search = null): array
+    {
+        $queryBuilder = $this->createQueryBuilder('answer')
+            ->addCriteria(self::createApprovedCriteria())
+            ->orderBy('answer.votes', 'DESC')
+            ->innerJoin('answer.question', 'question')
+            ->addSelect('question');
+
+        if ($search) {
+            $queryBuilder->andWhere('answer.content LIKE :searchTerm')
+                ->setParameter('searchTerm', '%'.$search.'%');
+        }
+
+        return $queryBuilder
+            ->setMaxResults(10)
+            ->getQuery()
+            ->getResult();
+    }
 }
