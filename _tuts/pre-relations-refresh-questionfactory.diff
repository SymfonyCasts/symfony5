diff --git a/src/DataFixtures/AppFixtures.php b/src/DataFixtures/AppFixtures.php
index 69fb861..0ade76a 100644
--- a/src/DataFixtures/AppFixtures.php
+++ b/src/DataFixtures/AppFixtures.php
@@ -11,11 +11,12 @@ class AppFixtures extends Fixture
 {
     public function load(ObjectManager $manager)
     {
-        QuestionFactory::new()->createMany(20);
+        QuestionFactory::createMany(20);
 
         QuestionFactory::new()
             ->unpublished()
-            ->createMany(5)
+            ->many(5)
+            ->create()
         ;
 
         $manager->flush();
diff --git a/src/Factory/QuestionFactory.php b/src/Factory/QuestionFactory.php
index 8687a11..cae31b6 100644
--- a/src/Factory/QuestionFactory.php
+++ b/src/Factory/QuestionFactory.php
@@ -4,22 +4,37 @@ namespace App\Factory;
 
 use App\Entity\Question;
 use App\Repository\QuestionRepository;
-use Symfony\Component\String\Slugger\AsciiSlugger;
 use Zenstruck\Foundry\RepositoryProxy;
 use Zenstruck\Foundry\ModelFactory;
 use Zenstruck\Foundry\Proxy;
 
 /**
+ * @extends ModelFactory<Question>
+ *
+ * @method static Question|Proxy createOne(array $attributes = [])
+ * @method static Question[]|Proxy[] createMany(int $number, array|callable $attributes = [])
+ * @method static Question|Proxy find(object|array|mixed $criteria)
  * @method static Question|Proxy findOrCreate(array $attributes)
- * @method static Question|Proxy random()
- * @method static Question[]|Proxy[] randomSet(int $number)
- * @method static Question[]|Proxy[] randomRange(int $min, int $max)
+ * @method static Question|Proxy first(string $sortedField = 'id')
+ * @method static Question|Proxy last(string $sortedField = 'id')
+ * @method static Question|Proxy random(array $attributes = [])
+ * @method static Question|Proxy randomOrCreate(array $attributes = [])
+ * @method static Question[]|Proxy[] all()
+ * @method static Question[]|Proxy[] findBy(array $attributes)
+ * @method static Question[]|Proxy[] randomSet(int $number, array $attributes = [])
+ * @method static Question[]|Proxy[] randomRange(int $min, int $max, array $attributes = [])
  * @method static QuestionRepository|RepositoryProxy repository()
- * @method Question|Proxy create($attributes = [])
- * @method Question[]|Proxy[] createMany(int $number, $attributes = [])
+ * @method Question|Proxy create(array|callable $attributes = [])
  */
 final class QuestionFactory extends ModelFactory
 {
+    public function __construct()
+    {
+        parent::__construct();
+
+        // TODO inject services if required (https://symfony.com/bundles/ZenstruckFoundryBundle/current/index.html#factories-as-services)
+    }
+
     public function unpublished(): self
     {
         return $this->addState(['askedAt' => null]);
@@ -40,9 +55,9 @@ final class QuestionFactory extends ModelFactory
 
     protected function initialize(): self
     {
-        // see https://github.com/zenstruck/foundry#initialization
+        // see https://symfony.com/bundles/ZenstruckFoundryBundle/current/index.html#initialization
         return $this
-            //->afterInstantiate(function(Question $question) { });
+            // ->afterInstantiate(function(Question $question) {})
         ;
     }
 
