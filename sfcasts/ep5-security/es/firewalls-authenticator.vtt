WEBVTT

00:00:01.026 --> 00:00:04.966 align:middle
Construimos este formulario de entrada haciendo una
ruta, un controlador y renderizando una plantilla:

00:00:05.286 --> 00:00:06.446 align:middle
Muy sencillo.

00:00:07.246 --> 00:00:11.756 align:middle
Cuando enviamos el formulario,
se devuelve por POST a /login.

00:00:12.176 --> 00:00:18.556 align:middle
Así que, para autenticar al usuario, es de
esperar que pongamos algo de lógica aquí:

00:00:19.216 --> 00:00:25.016 align:middle
como si se tratara de una petición POST, leer el correo
electrónico y la contraseña POSTados, consultar el objeto User...

00:00:25.446 --> 00:00:27.416 align:middle
y finalmente comprobar la contraseña.

00:00:28.146 --> 00:00:30.186 align:middle
¡Eso tiene mucho sentido!

00:00:30.536 --> 00:00:34.256 align:middle
Y eso no es en absoluto lo que vamos a hacer.

00:00:35.116 --> 00:00:37.636 align:middle
El sistema de autenticación de
Symfony funciona de una manera...

00:00:38.036 --> 00:00:41.626 align:middle
manera un poco mágica, que supongo
que es adecuada para nuestro sitio.

00:00:42.466 --> 00:00:46.466 align:middle
Al inicio de cada petición , antes
de que Symfony llame al controlador,

00:00:46.706 --> 00:00:50.856 align:middle
el sistema de seguridad ejecuta
un conjunto de "autenticadores".

00:00:51.716 --> 00:00:54.546 align:middle
El trabajo de cada autentificador
es mirar la petición,

00:00:54.746 --> 00:01:00.556 align:middle
ver si hay alguna información de autentificación que entienda
-como un correo electrónico y una contraseña enviados

00:01:00.556 --> 00:01:05.986 align:middle
, o una clave de la API que esté
almacenada en una cabecera- y, si la hay,

00:01:06.286 --> 00:01:09.916 align:middle
utilizarla para consultar al
usuario y comprobar la contraseña.

00:01:10.716 --> 00:01:13.316 align:middle
Si todo eso ocurre con éxito, entonces...

00:01:13.606 --> 00:01:16.116 align:middle
¡boom! Autenticación completa.

00:01:16.976 --> 00:01:21.046 align:middle
Nuestro trabajo es escribir y
activar estos autentificadores.

00:01:21.856 --> 00:01:24.516 align:middle
Abre config/packages/security.yaml.

00:01:25.436 --> 00:01:29.946 align:middle
Recuerda las dos partes de la seguridad:
la autenticación (quién eres)

00:01:30.206 --> 00:01:33.086 align:middle
y la autorización (qué puedes hacer).

00:01:33.916 --> 00:01:37.076 align:middle
La parte más importante de
este archivo es firewalls:

00:01:37.476 --> 00:01:43.856 align:middle
Un cortafuegos tiene que ver con la autenticación:
su trabajo es averiguar quién eres.

00:01:44.306 --> 00:01:49.036 align:middle
Y, normalmente, tiene sentido tener
sólo un cortafuegos en tu aplicación...

00:01:49.616 --> 00:01:52.686 align:middle
incluso si hay varias formas
diferentes de autenticación,

00:01:52.976 --> 00:01:56.866 align:middle
como un formulario de inicio de
sesión y una clave de API y OAuth.

00:01:57.716 --> 00:01:59.686 align:middle
Pero... woh woh woh.

00:02:00.406 --> 00:02:03.886 align:middle
Si casi siempre queremos un solo cortafuegos...

00:02:04.086 --> 00:02:06.266 align:middle
¿por qué hay ya dos? Así es

00:02:07.336 --> 00:02:12.516 align:middle
como funciona: al inicio de cada
petición , Symfony recorre la lista

00:02:12.516 --> 00:02:17.286 align:middle
de cortafuegos, lee la clave pattern
-que es una expresión regular-

00:02:17.716 --> 00:02:23.386 align:middle
y encuentra el primer cortafuegos cuyo
patrón coincida con la URL actual.

00:02:24.066 --> 00:02:28.436 align:middle
Así que sólo hay un
cortafuegos activo por petición.

00:02:29.226 --> 00:02:33.646 align:middle
Si te fijas bien, ¡este
primer cortafuegos es falso!

00:02:34.246 --> 00:02:40.296 align:middle
Básicamente busca si la URL
empieza por /_profiler o /_wdt...

00:02:40.296 --> 00:02:44.426 align:middle
y luego establece la seguridad en false:

00:02:45.116 --> 00:02:50.186 align:middle
En otras palabras, básicamente se asegura
de que no creas un sistema de seguridad

00:02:50.186 --> 00:02:53.756 align:middle
tan épico que...

00:02:53.756 --> 00:02:56.686 align:middle
que bloquea la barra de herramientas de
depuración de la web y el perfilador.

00:02:57.546 --> 00:03:02.946 align:middle
Así que... en realidad, sólo tenemos
un cortafuegos real llamado main.

00:03:03.536 --> 00:03:07.756 align:middle
No tiene la clave pattern, lo que significa
que coincidirá con todas las peticiones

00:03:07.916 --> 00:03:10.116 align:middle
que no coincidan con el cortafuegos dev.

00:03:10.816 --> 00:03:13.676 align:middle
Ah, y los nombres de estos
cortafuegos - main y dev?

00:03:14.136 --> 00:03:15.846 align:middle
No tienen ningún sentido. La

00:03:16.786 --> 00:03:20.486 align:middle
mayor parte de la configuración que vamos a
poner debajo del cortafuegos está relacionada

00:03:20.486 --> 00:03:25.996 align:middle
con la activación de los autentificadores: esas
cosas que se ejecutan al principio de cada petición

00:03:25.996 --> 00:03:27.746 align:middle
y que intentan autentificar al usuario.

00:03:28.306 --> 00:03:30.756 align:middle
Pronto añadiremos parte de esa configuración.

00:03:31.256 --> 00:03:35.106 align:middle
Pero estas dos claves
superiores hacen algo diferente.

00:03:35.816 --> 00:03:41.486 align:middle
lazy permite que el sistema de autenticación
no autentique al usuario hasta que lo necesite

00:03:41.906 --> 00:03:46.886 align:middle
y provider vincula este cortafuegos al proveedor
de usuarios del que hemos hablado antes.

00:03:47.826 --> 00:03:49.786 align:middle
Deberías tener estas dos líneas...

00:03:50.276 --> 00:03:52.456 align:middle
pero ninguna es terriblemente importante: De

00:03:53.306 --> 00:03:58.316 align:middle
todos modos, cada vez que queramos autentificar
al usuario -como cuando enviamos un

00:03:58.316 --> 00:04:01.366 align:middle
formulario de acceso-
necesitamos un autentificador.

00:04:02.286 --> 00:04:07.416 align:middle
Hay algunas clases de autentificadores básicos que podemos utilizar,
incluida una para los formularios de inicio de sesión.... y

00:04:07.846 --> 00:04:09.786 align:middle
te mostraré algunas de ellas
más adelante. Pero para

00:04:10.366 --> 00:04:15.416 align:middle
empezar, vamos a construir nuestra propia
clase de autentificador desde cero. Para ello

00:04:16.216 --> 00:04:22.056 align:middle
, ve al terminal y ejecuta: symfony
console make:auth Como puedes ver, puedes

00:04:22.306 --> 00:04:25.196 align:middle
seleccionar "Autenticador de formularios de
inicio de sesión" para engañar y generar un

00:04:25.196 --> 00:04:28.156 align:middle
montón de código para un formulario
de inicio de sesión. Pero como

00:04:28.916 --> 00:04:32.946 align:middle
estamos construyendo cosas desde cero,
selecciona "Autentificador vacío" y llámalo

00:04:33.136 --> 00:04:35.286 align:middle
LoginFormAuthenticator . Espectacular. Esto

00:04:36.416 --> 00:04:41.486 align:middle
hizo dos cosas: creó una nueva
clase de autentificador y también

00:04:41.786 --> 00:04:44.726 align:middle
actualizó security.yaml. Abre primero la clase

00:04:45.446 --> 00:04:51.056 align:middle
: src/Security/LoginFormAuthenticator.php:
La única

00:04:51.056 --> 00:04:56.676 align:middle
regla sobre un autentificador es que necesita
implementar AuthenticatorInterface... aunque normalmente

00:04:57.216 --> 00:05:00.486 align:middle
extenderás AbstractAuthenticator...
que implementa

00:05:00.906 --> 00:05:03.646 align:middle
AuthenticatorInterface por ti: Hablaremos

00:05:04.356 --> 00:05:07.486 align:middle
de lo que hacen estos métodos uno por uno.
En cualquier caso, AbstractAuthenticator

00:05:08.416 --> 00:05:13.736 align:middle
está bien porque implementa un método
súper aburrido para ti. Una vez que

00:05:15.906 --> 00:05:20.986 align:middle
activemos esta nueva clase en el sistema de
seguridad, al principio de cada petición, Symfony

00:05:21.146 --> 00:05:25.036 align:middle
llamará a este método supports()
y básicamente preguntará

00:05:25.446 --> 00:05:30.496 align:middle
¿Ves información de autenticación en
esta petición que entiendas? Para comprobar

00:05:31.316 --> 00:05:36.206 align:middle
que Symfony llamará a esto, vamos
a dd('supports'): Bien, entonces,

00:05:37.036 --> 00:05:40.366 align:middle
¿cómo activamos este autentificador? ¿Cómo

00:05:40.916 --> 00:05:44.796 align:middle
le decimos a nuestro cortafuegos que
debe utilizar nuestra nueva clase? En

00:05:45.646 --> 00:05:49.626 align:middle
security.yaml , ya tenemos el código que
lo hace Esta línea custom_authenticator

00:05:50.306 --> 00:05:54.266 align:middle
fue añadida por el comando
make:auth: Así que si

00:05:55.046 --> 00:05:59.696 align:middle
tienes una clase autentificadora personalizada,
así es como la activas. Más adelante,

00:06:00.386 --> 00:06:04.536 align:middle
veremos que puedes tener varios autentificadores
personalizados si quieres. En cualquier caso, ¡esto

00:06:05.316 --> 00:06:09.396 align:middle
significa que nuestro autentificador
ya está activo! Así que vamos a

00:06:10.116 --> 00:06:10.996 align:middle
probarlo. Actualiza la

00:06:11.406 --> 00:06:12.876 align:middle
página de inicio de sesión. ¡Se trata

00:06:12.876 --> 00:06:16.766 align:middle
del método supports()! De hecho,

00:06:17.386 --> 00:06:22.026 align:middle
si vas a cualquier URL, se encontrará
con nuestro dd(). En cada petición

00:06:22.776 --> 00:06:28.286 align:middle
, antes del controlador, Symfony pregunta
ahora a nuestro autentificador si

00:06:28.436 --> 00:06:31.916 align:middle
soporta la autentificación en esta
petición. A continuación , vamos a rellenar

00:06:32.846 --> 00:06:37.686 align:middle
la lógica del autentificador y conseguir
que nuestro usuario inicie la sesión
