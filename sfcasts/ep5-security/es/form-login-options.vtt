WEBVTT

00:00:01.016 --> 00:00:05.756 align:middle
Utilizar form_login no es tan flexible como
una clase de autentificador personalizada...

00:00:05.916 --> 00:00:08.216 align:middle
aunque se pueden configurar muchas cosas.

00:00:08.816 --> 00:00:12.916 align:middle
Por ejemplo, ahora mismo, no
comprueba nuestro token CSRF.

00:00:13.676 --> 00:00:17.346 align:middle
Habilita eso diciendo enable_csrf: true:

00:00:18.076 --> 00:00:18.636 align:middle
¡Eso es! En

00:00:19.176 --> 00:00:22.986 align:middle
las opciones, cuando
activas la protección CSRF,

00:00:23.206 --> 00:00:27.556 align:middle
busca un campo oculto llamado _csrf_token

00:00:27.806 --> 00:00:31.226 align:middle
con la cadena authenticate
utilizada para generarlo.

00:00:31.946 --> 00:00:36.116 align:middle
Afortunadamente, en nuestra plantilla,
ya estamos utilizando ambas cosas...

00:00:36.576 --> 00:00:38.956 align:middle
así que esto va a funcionar.

00:00:39.686 --> 00:00:42.516 align:middle
Y hay incluso más formas de configurarlo.

00:00:43.176 --> 00:00:47.786 align:middle
Recuerda: para obtener esta configuración,
he ejecutado debug:config security...

00:00:48.176 --> 00:00:51.836 align:middle
que muestra su configuración actual,
incluyendo los valores por defecto.

00:00:52.516 --> 00:00:54.486 align:middle
Pero aquí no se muestran todas las opciones.

00:00:54.976 --> 00:00:58.816 align:middle
Para ver una lista completa,
ejecuta config:dump security.

00:00:59.716 --> 00:01:05.366 align:middle
En lugar de mostrar tu configuración actual, esto
muestra una enorme lista de configuraciones de ejemplo.

00:01:05.976 --> 00:01:07.816 align:middle
Esta es una lista mucho más grande...

00:01:08.576 --> 00:01:10.216 align:middle
aquí está form_login.

00:01:11.066 --> 00:01:12.466 align:middle
Mucho de esto lo hemos visto antes...

00:01:12.916 --> 00:01:16.886 align:middle
pero success_handler y
failure_handler son nuevos.

00:01:17.496 --> 00:01:19.966 align:middle
Puedes buscarlos en la
documentación para aprender a

00:01:19.966 --> 00:01:22.996 align:middle
controlar lo que ocurre
tras el éxito o el fracaso.

00:01:23.616 --> 00:01:30.566 align:middle
Pero también, más adelante, vamos a conocer
una forma más global de engancharse al

00:01:30.606 --> 00:01:34.386 align:middle
proceso de éxito o fracaso
registrando un oyente de eventos. De

00:01:35.186 --> 00:01:38.956 align:middle
todos modos, ya no vamos a utilizar
nuestro LoginFormAuthenticator,

00:01:39.336 --> 00:01:41.946 align:middle
así que siéntete libre de eliminarlo.

00:01:41.946 --> 00:01:43.866 align:middle
Y... ¡Tengo buenas noticias!

00:01:44.246 --> 00:01:49.486 align:middle
¡El autentificador principal está haciendo
una cosa que nuestra clase nunca hizo!

00:01:50.176 --> 00:01:51.136 align:middle
En authenticate()...

00:01:51.676 --> 00:01:54.946 align:middle
esto llama a getCredentials()
para leer los datos POST.

00:01:55.846 --> 00:01:57.506 align:middle
Déjame buscar "sesión"...

00:01:59.106 --> 00:02:01.646 align:middle
¡yup! Esto me llevó a getCredentials(). De

00:02:02.356 --> 00:02:07.146 align:middle
todos modos, después de coger el correo
electrónico enviado -en este código se almacena

00:02:07.146 --> 00:02:13.356 align:middle
como $credentials['username'] -
guarda ese valor en la sesión.

00:02:14.116 --> 00:02:18.586 align:middle
Lo hace para que, si falla la
autenticación, podamos leerlo

00:02:18.776 --> 00:02:22.216 align:middle
y rellenar previamente la casilla del correo
electrónico en el formulario de acceso.

00:02:22.816 --> 00:02:23.766 align:middle
¡Vamos a hacerlo!

00:02:24.446 --> 00:02:28.776 align:middle
Ve a nuestro controlador:
src/Controller/SecurityController.php.

00:02:28.776 --> 00:02:32.096 align:middle
Este AuthenticationUtils
tiene otro método útil.

00:02:32.646 --> 00:02:37.876 align:middle
Pasa una nueva variable a la plantilla llamada
last_username -puedes llamarla last_email

00:02:37.876 --> 00:02:42.956 align:middle
si quieres- y ponla en
$authenticationUtils->getLastUsername():

00:02:43.776 --> 00:02:48.986 align:middle
Una vez más, esto es sólo un ayudante para
leer una clave específica de la sesión.

00:02:49.816 --> 00:02:54.926 align:middle
Ahora, en la plantilla - login.html.twig -
aquí arriba en el campo de correo electrónico,

00:02:55.836 --> 00:03:01.346 align:middle
añade value="{{ last_username }} ": ¡Genial!

00:03:02.156 --> 00:03:03.956 align:middle
Si vamos a /login...

00:03:04.546 --> 00:03:08.486 align:middle
¡ya está ahí por haber rellenado
el formulario hace un minuto!

00:03:09.246 --> 00:03:10.866 align:middle
Si introducimos un correo
electrónico diferente...

00:03:12.336 --> 00:03:14.346 align:middle
¡sí! Eso también se pega.

00:03:15.316 --> 00:03:21.166 align:middle
Siguiente: volvamos a la autorización aprendiendo
a denegar el acceso en un controlador...

00:03:21.616 --> 00:03:23.676 align:middle
de diferentes maneras
