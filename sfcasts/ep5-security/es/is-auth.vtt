WEBVTT

00:00:01.046 --> 00:00:03.566 align:middle
Si simplemente necesitamos averiguar si

00:00:03.566 --> 00:00:08.236 align:middle
el usuario está conectado
o no, comprobamos ROLE_USER:

00:00:08.846 --> 00:00:09.886 align:middle
Esto funciona....

00:00:10.116 --> 00:00:15.886 align:middle
simplemente por cómo está construida nuestra
aplicación: funciona porque en getRoles(), nos

00:00:16.106 --> 00:00:20.976 align:middle
aseguramos de que todos los usuarios
conectados tienen al menos este rol:

00:00:21.686 --> 00:00:26.876 align:middle
Genial. Pero esto me hace preguntarme:
¿hay una forma más "oficial"

00:00:26.876 --> 00:00:29.416 align:middle
en Symfony de comprobar si
un usuario está conectado?

00:00:30.076 --> 00:00:32.496 align:middle
¡Resulta que sí la hay!

00:00:32.946 --> 00:00:37.166 align:middle
Comprobació n de
is_granted('IS_AUTHENTICATED_FULLY'): Por

00:00:37.976 --> 00:00:42.916 align:middle
cierto, todo lo que pasemos a
is_granted() en Twig -como ROLE_USER

00:00:42.916 --> 00:00:48.256 align:middle
o IS_AUTHENTICATED_FULLY - también
podemos pasarlo al método isGranted()

00:00:48.256 --> 00:00:51.466 align:middle
en el controlador, o a
denyAccessUnlessGranted()...

00:00:51.746 --> 00:00:53.596 align:middle
o a access_control.

00:00:53.986 --> 00:00:57.116 align:middle
Todos ellos llaman al sistema
de seguridad de la misma manera.

00:00:57.986 --> 00:01:04.376 align:middle
Seguro que te has dado cuenta de que
IS_AUTHENTICATED_FULLY no empieza por ROLE_.

00:01:05.086 --> 00:01:09.236 align:middle
Sí Los roles deben empezar por ROLE_...

00:01:09.846 --> 00:01:16.326 align:middle
pero esta cadena no es un rol: la
maneja un sistema totalmente diferente:

00:01:16.886 --> 00:01:21.436 align:middle
una parte del sistema de seguridad que
simplemente devuelve true o false en función de

00:01:21.436 --> 00:01:23.826 align:middle
si el usuario está conectado o no.

00:01:24.646 --> 00:01:29.126 align:middle
Así que, en la práctica, esto debería
tener el mismo efecto que ROLE_USER.

00:01:29.706 --> 00:01:30.986 align:middle
Cuando actualizamos...

00:01:31.616 --> 00:01:33.246 align:middle
¡sí! No hay cambios.

00:01:34.006 --> 00:01:38.786 align:middle
Ah, pero haz clic en el enlace de seguridad de la barra de
herramientas de depuración de la web para saltar al perfilador.

00:01:39.756 --> 00:01:44.256 align:middle
Desplázate hasta el final para encontrar algo
llamado "Registro de decisiones de acceso".

00:01:44.776 --> 00:01:49.016 align:middle
Esto es superguay: Symfony hace
un seguimiento de todas las veces

00:01:49.046 --> 00:01:54.496 align:middle
que se llamó al sistema de autorización
durante la petición y cuál fue el resultado.

00:01:54.496 --> 00:02:00.426 align:middle
Por ejemplo, esta primera comprobación
fue para ROLE_ADMIN, que probablemente

00:02:00.426 --> 00:02:08.726 align:middle
viene de access_control: como fuimos a /admin, esta
regla coincidió y se comprobó para ROLE_ADMIN.

00:02:09.576 --> 00:02:15.486 align:middle
La siguiente comprobación es de nuevo para ROLE_ADMIN
-probablemente para mostrar el enlace del administrador en Twig-

00:02:15.976 --> 00:02:19.456 align:middle
y luego está la comprobación
para IS_AUTHENTICATED_FULLY

00:02:19.616 --> 00:02:22.596 align:middle
para mostrar el enlace de entrada o salida.

00:02:23.296 --> 00:02:25.996 align:middle
Se ha concedido el acceso a los tres.

00:02:26.776 --> 00:02:32.206 align:middle
Además de IS_AUTHENTICATED_FULLY,
hay otro par de cadenas especiales

00:02:32.206 --> 00:02:34.326 align:middle
que puedes pasar al sistema de seguridad.

00:02:35.106 --> 00:02:40.946 align:middle
La primera es IS_AUTHENTICATED_REMEMBERED,
que es súper potente...

00:02:40.946 --> 00:02:42.486 align:middle
pero puede ser un poco confuso.

00:02:43.136 --> 00:02:44.336 align:middle
Así es como funciona.

00:02:45.046 --> 00:02:50.126 align:middle
Si estoy conectado, siempre tengo
IS_AUTHENTICATED_REMEMBERED.

00:02:50.906 --> 00:02:56.326 align:middle
Eso... hasta ahora debería sonar
idéntico a IS_AUTHENTICATED_FULLY.

00:02:56.946 --> 00:02:59.466 align:middle
Pero, hay una diferencia clave.

00:03:00.106 --> 00:03:05.536 align:middle
Supongamos que me conecto, cierro el
navegador, lo abro y lo actualizo...

00:03:05.906 --> 00:03:09.736 align:middle
de modo que estoy conectado gracias
a una cookie de "recuérdame".

00:03:10.446 --> 00:03:14.736 align:middle
En esta situación, tendré
IS_AUTHENTICATED_REMEMBERED

00:03:15.276 --> 00:03:18.986 align:middle
pero no tendré IS_AUTHENTICATED_FULLY.

00:03:19.736 --> 00:03:26.786 align:middle
Sí, sólo tienes IS_AUTHENTICATED_FULLY si te
has conectado durante esta sesión del navegador.

00:03:27.506 --> 00:03:28.296 align:middle
Podemos ver esto.

00:03:28.676 --> 00:03:34.196 align:middle
Dirígete a tu navegador, abre tus herramientas de
depuración, ve a Aplicación y luego a Cookies.

00:03:34.876 --> 00:03:37.236 align:middle
Oh... ¡mi cookie remember me ha desaparecido!

00:03:37.936 --> 00:03:40.096 align:middle
Esto... fue un error que cometí.

00:03:40.706 --> 00:03:41.246 align:middle
Cierra la sesión...

00:03:42.676 --> 00:03:44.646 align:middle
y luego ve a security.yaml.

00:03:45.566 --> 00:03:51.296 align:middle
Antes, hemos pasado de utilizar nuestro
LoginFormAuthenticator personalizado a form_login.

00:03:51.916 --> 00:03:55.676 align:middle
Ese sistema funciona totalmente
con las cookies "recuérdame".

00:03:56.306 --> 00:04:00.256 align:middle
Pero también hemos eliminado la casilla de
verificación de nuestro formulario de inicio de sesión.

00:04:00.846 --> 00:04:06.276 align:middle
Y, dentro de nuestro autentificador,
confiábamos en llamar a enable()

00:04:06.276 --> 00:04:09.966 align:middle
en el RemmeberMeBadge para forzar la
fijación de la cookie: El autentificador

00:04:11.246 --> 00:04:17.006 align:middle
principal form_login añade
definitivamente el RememberMeBadge,

00:04:17.346 --> 00:04:21.816 align:middle
que anuncia que opta por
el sistema "recuérdame".

00:04:22.546 --> 00:04:25.966 align:middle
Pero no llama a enable() en él.

00:04:26.716 --> 00:04:30.326 align:middle
Esto significa que tenemos que añadir una
casilla de verificación al formulario... o,

00:04:30.786 --> 00:04:35.676 align:middle
en security.yaml, añadir
always_remember_me: true:

00:04:36.616 --> 00:04:42.716 align:middle
Volvamos a conectarnos ahora: abraca_admin@example.com,
contraseña tada y... ¡ya está

00:04:45.376 --> 00:04:47.996 align:middle
! Ahí está mi cookie REMEMBERME. Vale:

00:04:48.846 --> 00:04:52.396 align:middle
como acabamos de iniciar la sesión
- por lo que "nos hemos conectado

00:04:52.396 --> 00:04:56.326 align:middle
durante esta sesión", estamos
"totalmente autentificados". Pero,

00:04:57.076 --> 00:05:05.216 align:middle
si cerrara mi navegador -lo que imitaré
borrando la cookie de sesión- y actualizara...

00:05:06.146 --> 00:05:12.366 align:middle
seguimos conectados, pero ahora estamos
conectados gracias a la cookie remember me.

00:05:13.006 --> 00:05:15.786 align:middle
Puedes verlo a través de RememberMeToken. ¡Y

00:05:16.546 --> 00:05:17.546 align:middle
mira aquí arriba! ¡

00:05:17.886 --> 00:05:20.726 align:middle
Tenemos los enlaces "Iniciar
sesión" y "Registrarse"! Sí,

00:05:21.316 --> 00:05:24.766 align:middle
ahora no estamos en
IS_AUTHENTICATED_FULLY porque

00:05:25.116 --> 00:05:29.166 align:middle
no nos hemos autentificado
durante esta sesión. Esto

00:05:29.946 --> 00:05:34.266 align:middle
es una forma larga de decir que si
utilizas las cookies "recuérdame ", la

00:05:34.776 --> 00:05:40.376 align:middle
mayoría de las veces debes utilizar
IS_AUTHENTICATED_REMEMBERED cuando simplemente quieras

00:05:40.376 --> 00:05:43.156 align:middle
saber si el usuario está conectado o no: Y

00:05:43.856 --> 00:05:49.416 align:middle
luego, si hay un par de partes de tu
sitio que son más sensibles -como

00:05:49.886 --> 00:05:56.976 align:middle
quizás la página de "cambio de contraseña"-
entonces protégelas con IS_AUTHENTICATED_FULLY. Si

00:05:57.876 --> 00:06:03.366 align:middle
el usuario intenta acceder a esta página y
sólo tiene IS_AUTHENTICATED_REMEMBERED, Symfony

00:06:03.816 --> 00:06:06.836 align:middle
ejecutará realmente su punto de entrada. En

00:06:07.396 --> 00:06:10.316 align:middle
otras palabras, los redirigirá
al formulario de acceso. Actualiza

00:06:11.116 --> 00:06:12.536 align:middle
la página y... ¡sí!

00:06:12.876 --> 00:06:15.696 align:middle
Los enlaces correctos han vuelto. Vale,

00:06:16.506 --> 00:06:21.766 align:middle
hay otras cadenas especiales similares
a IS_AUTHENTICATED_REMEMBERED, pero

00:06:22.246 --> 00:06:25.356 align:middle
sólo una más que creo que es útil. Se

00:06:26.106 --> 00:06:29.216 align:middle
llama PUBLIC_ACCESS... y

00:06:29.646 --> 00:06:33.456 align:middle
devuelve verdadero el 100% de las veces. Sí,

00:06:34.136 --> 00:06:39.926 align:middle
todo el mundo tiene PUBLIC_ACCESS,
aunque no esté conectado. Así que...

00:06:40.676 --> 00:06:46.656 align:middle
puedes pensar: ¿cómo podría
ser útil? ¡ Es una buena

00:06:46.656 --> 00:06:48.156 align:middle
pregunta!

00:06:48.766 --> 00:06:51.756 align:middle
Mira de nuevo access_control
en security.yaml. Para

00:06:52.316 --> 00:06:57.826 align:middle
acceder a cualquier URL que empiece
por /admin, necesitas ROLE_ADMIN: Pero

00:06:58.646 --> 00:07:05.786 align:middle
imagina que tuviéramos una página de
acceso en la URL /admin/login. Vamos a

00:07:06.526 --> 00:07:09.096 align:middle
crear un controlador ficticio para esto. En la

00:07:09.716 --> 00:07:14.236 align:middle
parte inferior de AdminController, añade
public function adminLogin()... con

00:07:16.636 --> 00:07:24.086 align:middle
una ruta - /admin/login - y, dentro, devuelve
una nueva Response() con: Finge que la

00:07:24.576 --> 00:07:32.896 align:middle
página de acceso del administrador
debe ser pública Cierra la sesión... y

00:07:34.236 --> 00:07:36.816 align:middle
ve a /admin/login . ¡ Acceso

00:07:37.456 --> 00:07:39.036 align:middle
denegado! Somos

00:07:39.336 --> 00:07:41.826 align:middle
redirigidos a /login. Y

00:07:42.636 --> 00:07:51.826 align:middle
realmente, si /admin/login fuera nuestra página de inicio de
sesión, entonces seríamos redirigidos a /admin/login ... que

00:07:52.006 --> 00:07:55.766 align:middle
nos redirigiría a /admin/login. .. que

00:07:56.306 --> 00:07:59.716 align:middle
nos redirigiría a /admin/login... que...

00:08:00.046 --> 00:08:00.636 align:middle
bueno,

00:08:00.976 --> 00:08:05.366 align:middle
ya te haces una idea: nos quedaríamos atrapados en
un bucle de redirecciones. Y, además, ¡qué mal!

00:08:05.746 --> 00:08:11.426 align:middle
En security.yaml, queremos
poder exigir ROLE_ADMIN para

00:08:11.566 --> 00:08:14.626 align:middle
todas las URL que empiecen
por /admin... excepto

00:08:14.906 --> 00:08:18.256 align:middle
para /admin/login. La

00:08:19.016 --> 00:08:23.036 align:middle
clave para hacerlo es PUBLIC_ACCESS Copia

00:08:23.806 --> 00:08:26.086 align:middle
el control de acceso y
pégalo arriba. Recuerda que

00:08:26.816 --> 00:08:33.896 align:middle
sólo coincide un access_control por petición
y coincide de arriba a abajo. Así que

00:08:34.726 --> 00:08:39.616 align:middle
podemos añadir una nueva regla que coincida con
cualquier cosa que empiece por /admin/login y

00:08:40.066 --> 00:08:43.426 align:middle
que requiera PUBLIC_ACCESS... ¡que

00:08:43.886 --> 00:08:46.286 align:middle
siempre devolverá true! Gracias

00:08:47.086 --> 00:08:51.456 align:middle
a esto, si vamos a cualquier cosa
que empiece por /admin/login,

00:08:51.686 --> 00:08:55.076 align:middle
sólo coincidirá con
este access_control... ¡y

00:08:55.326 --> 00:08:57.736 align:middle
se concederá el acceso! Pruébalo

00:08:58.546 --> 00:09:02.096 align:middle
: ve a /admin/login y...

00:09:02.526 --> 00:09:07.406 align:middle
¡se carga! A continuación: hemos
hablado de los roles y hemos hablado de

00:09:07.406 --> 00:09:10.226 align:middle
denegar el acceso de varias maneras
diferentes. Así que pasemos

00:09:10.876 --> 00:09:17.026 align:middle
al objeto User: cómo podemos preguntar
a Symfony quién está conectado
