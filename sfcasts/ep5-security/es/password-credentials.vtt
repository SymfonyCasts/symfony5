WEBVTT

00:00:01.006 --> 00:00:04.706 align:middle
El proceso de guardar la contraseña
de un usuario siempre es así

00:00:04.976 --> 00:00:10.616 align:middle
empezar con una contraseña en texto plano, hacer un hash
de la misma, y luego guardar la versión hash en el User.

00:00:11.476 --> 00:00:14.336 align:middle
Esto es algo que vamos a
hacer en los accesorios...

00:00:14.546 --> 00:00:18.396 align:middle
pero también lo haremos en un
formulario de registro más adelante...

00:00:18.716 --> 00:00:21.746 align:middle
y también lo necesitarás en un
formulario de cambio de contraseña.

00:00:22.616 --> 00:00:25.786 align:middle
Para facilitar esto, voy a hacer algo opcional.

00:00:26.256 --> 00:00:31.276 align:middle
En User, arriba, añade una nueva
propiedad private $plainPassword:

00:00:32.146 --> 00:00:37.116 align:middle
Lo importante es que esta propiedad no
se persistirá en la base de datos: es

00:00:37.526 --> 00:00:42.016 align:middle
sólo una propiedad temporal que podemos
utilizar durante, por ejemplo, el

00:00:42.286 --> 00:00:44.696 align:middle
registro, para almacenar
la contraseña simple. A

00:00:45.586 --> 00:00:48.716 align:middle
continuación, iré a "Código"->"Generar"
-o Command+N en un Mac- para generar el get ter

00:00:48.866 --> 00:00:50.866 align:middle
y el setter para esto. El getter devolverá

00:00:52.016 --> 00:00:54.086 align:middle
un string anulable : Ahora, si

00:00:55.046 --> 00:01:00.546 align:middle
tienes una propiedad plainPassword, querrás encontrar
eraseCredentials() y establecer $this->plainPassword como

00:01:00.626 --> 00:01:03.116 align:middle
nulo: Esto... no es realmente

00:01:03.906 --> 00:01:06.896 align:middle
tan importante. Después de que
la autenticación sea exitosa,

00:01:07.546 --> 00:01:12.116 align:middle
Symfony llama a eraseCredentials().
Es.. . sólo una forma

00:01:12.416 --> 00:01:17.026 align:middle
de "borrar cualquier información
sensible" de tu objeto User

00:01:17.056 --> 00:01:20.386 align:middle
una vez que se ha realizado la
autenticación. Técnicamente, nunca

00:01:21.206 --> 00:01:25.766 align:middle
pondremos plainPassword durante la
autenticación... así que no importa.

00:01:25.766 --> 00:01:26.996 align:middle
Pero, de nuevo, es

00:01:27.116 --> 00:01:29.156 align:middle
algo seguro. De vuelta a UserFactory, en lugar

00:01:30.086 --> 00:01:36.826 align:middle
de establecer la propiedad password, establece
plainPassword como "tada": Si nos detuviéramos

00:01:37.746 --> 00:01:40.876 align:middle
ahora, se establecería esta propiedad...
pero entonces la propiedad password

00:01:41.176 --> 00:01:44.156 align:middle
seguiría siendo null... y explotaría

00:01:44.606 --> 00:01:48.386 align:middle
en la base de datos porque esa columna es
necesaria. Así que, después de que Foundry haya

00:01:49.226 --> 00:01:55.156 align:middle
terminado de instanciar el objeto, tenemos que ejecutar
algún código adicional que lea el plainPassword

00:01:55.306 --> 00:01:57.866 align:middle
y lo someta a hash. Podemos hacerlo

00:01:58.776 --> 00:02:02.036 align:middle
aquí abajo, en el método initialize()... mediante un
"after instantiation" (después de la instanciación)

00:02:02.436 --> 00:02:04.736 align:middle
después de la instanciación:
Esto está muy bien:

00:02:05.446 --> 00:02:08.916 align:middle
llama a $this->afterInstantiate(),
pásale una devolución de llamada

00:02:09.246 --> 00:02:14.186 align:middle
y, dentro de digamos si
$user->getPlainPassword() - por si acaso

00:02:14.706 --> 00:02:19.766 align:middle
anulamos eso a null - entonces
$user->setPassword(). Genera el hash con

00:02:20.376 --> 00:02:21.336 align:middle
$this->passwordHasher->hashPassword()
pasándole el

00:02:21.336 --> 00:02:27.806 align:middle
usuario al que estamos tratando de
hacer el hash - así que $user - y

00:02:27.806 --> 00:02:34.326 align:middle
luego lo que sea la contraseña simple:
$user->getPlainPassword(): ¡Hecho! Vamos a probar esto.

00:02:35.306 --> 00:02:36.946 align:middle
Busca tu terminal y ejecuta:

00:02:37.546 --> 00:02:43.476 align:middle
symfony console doctrine:fixtures:load Esto te
llevará un poco más de tiempo que antes, porque

00:02:43.476 --> 00:02:48.876 align:middle
hacer el hash de las contraseñas requiere un uso
intensivo de la CPU. Pero... ¡funciona! Comprueba

00:02:49.416 --> 00:02:51.186 align:middle
la tabla user:

00:02:52.086 --> 00:02:58.886 align:middle
symfony console doctrine:query:sql 'SELECT *
FROM user' Y... ¡lo tengo! ¡ Cada usuario

00:02:59.186 --> 00:03:03.336 align:middle
tiene una versión con hash de la
contraseña! Por fin estamos preparados para

00:03:04.206 --> 00:03:08.716 align:middle
comprobar la contraseña del usuario dentro
de nuestro autentificador. Para ello,

00:03:09.276 --> 00:03:14.776 align:middle
tenemos que hacer un hash de la contraseña simple
enviada y luego compararla de forma segura con el hash

00:03:14.776 --> 00:03:16.736 align:middle
de la base de datos. Bueno, no necesitamos

00:03:17.446 --> 00:03:19.166 align:middle
hacer esto... porque Symfony

00:03:19.276 --> 00:03:21.746 align:middle
lo hará automáticamente.
Compruébalo: sustituye

00:03:22.256 --> 00:03:26.776 align:middle
CustomCredentials por un nuevo y pásale la
PasswordCredentials contraseña enviada en

00:03:27.286 --> 00:03:30.296 align:middle
texto plano: ¡Ya está! Pruébalo.

00:03:30.806 --> 00:03:31.946 align:middle
Accede

00:03:32.616 --> 00:03:37.676 align:middle
con nuestro usuario real - - y copia
eso, y luego abraca_admin@example.com

00:03:38.016 --> 00:03:41.496 align:middle
una contraseña errónea. ¡Muy
bien! ¡Contraseña no válida! Ahora

00:03:42.776 --> 00:03:44.706 align:middle
introduce la contraseña real

00:03:45.316 --> 00:03:47.536 align:middle
tada . ¡Funciona! ¡Es increíble!

00:03:49.076 --> 00:03:51.946 align:middle
Cuando pones un

00:03:52.276 --> 00:03:57.826 align:middle
PasswordCredentials dentro de tu , Symfony lo
utiliza automáticamente para comparar la Passport

00:03:57.826 --> 00:04:03.116 align:middle
contraseña enviada con la contraseña con hash
del usuario en la base de datos. Eso me encanta.

00:04:03.476 --> 00:04:04.796 align:middle
Todo esto es posible

00:04:05.516 --> 00:04:10.946 align:middle
gracias a un potente sistema de escucha de eventos
dentro de la seguridad. Vamos a aprender más sobre

00:04:11.636 --> 00:04:15.276 align:middle
eso a continuación y veremos cómo podemos
aprovecharlo para añadir protección CSRF

00:04:15.346 --> 00:04:18.686 align:middle
a nuestro formulario de
acceso... con unas dos líneas

00:04:19.136 --> 00:04:21.046 align:middle
de código
