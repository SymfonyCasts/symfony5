WEBVTT

00:00:01.006 --> 00:00:04.616 align:middle
Hagamos un rápido repaso de cómo
funciona nuestro autentificador.

00:00:04.996 --> 00:00:10.216 align:middle
Después de activarlo en security.yaml:
Symfony llama a nuestro método supports()

00:00:10.216 --> 00:00:13.686 align:middle
en cada petición antes del controlador:

00:00:14.676 --> 00:00:18.386 align:middle
Como nuestro autentificador sabe cómo manejar el
envío del formulario de acceso, devolvemos true

00:00:18.846 --> 00:00:23.916 align:middle
si la petición actual es un POST a /login.

00:00:24.816 --> 00:00:30.936 align:middle
Una vez que devolvemos true, Symfony llama a
authenticate() y básicamente pregunta Bien,

00:00:31.216 --> 00:00:35.506 align:middle
dime quién está intentando
iniciar sesión y qué prueba tiene.

00:00:36.606 --> 00:00:39.616 align:middle
Respondemos a estas preguntas
devolviendo un Passport:

00:00:40.016 --> 00:00:45.336 align:middle
El primer argumento identifica al usuario y el
segundo argumento identifica alguna prueba...

00:00:46.186 --> 00:00:51.156 align:middle
en este caso, sólo una llamada de retorno que
comprueba que la contraseña enviada es tada.

00:00:51.976 --> 00:00:55.876 align:middle
Si somos capaces de encontrar un usuario
y las credenciales son correctas...

00:00:56.306 --> 00:00:58.846 align:middle
¡entonces estamos autentificados!

00:00:59.736 --> 00:01:02.106 align:middle
¡Ya lo vimos al final del último vídeo!

00:01:02.486 --> 00:01:07.956 align:middle
Cuando nos conectamos utilizando el correo electrónico de un
usuario real en nuestra base de datos y la contraseña tada...

00:01:08.246 --> 00:01:10.526 align:middle
nos encontramos con esta declaración dd():

00:01:11.246 --> 00:01:16.326 align:middle
Sí, si la autenticación tiene éxito,
Symfony llama a onAuthenticationSuccess()

00:01:16.746 --> 00:01:19.416 align:middle
y pregunta: ¡Felicidades
por la autenticación!

00:01:19.646 --> 00:01:21.046 align:middle
¡Estamos súper orgullosos!

00:01:21.446 --> 00:01:23.756 align:middle
Pero... ¿qué debemos hacer ahora?

00:01:24.646 --> 00:01:30.956 align:middle
En nuestra situación, tras el éxito, probablemente
queramos redirigir al usuario a alguna otra página. Pero

00:01:31.656 --> 00:01:34.986 align:middle
para otros tipos de autenticación
podrías hacer algo diferente. Por

00:01:35.676 --> 00:01:43.056 align:middle
ejemplo, si te estás autenticando mediante un token
de la API, devolverías null desde este método para

00:01:43.216 --> 00:01:46.556 align:middle
permitir que la petición continúe hacia
el controlador normal. En cualquier caso,

00:01:47.416 --> 00:01:52.556 align:middle
ese es nuestro trabajo aquí: decidir
qué hacer "a continuación"... que

00:01:53.146 --> 00:01:59.656 align:middle
será "no hacer nada" - null - o devolver
algún tipo de objeto Response. Vamos a

00:02:00.106 --> 00:02:01.656 align:middle
redirigir. Dirígete

00:02:02.516 --> 00:02:03.896 align:middle
a la parte superior de esta clase. Añade

00:02:05.216 --> 00:02:09.906 align:middle
un segundo argumento - RouterInterface $router -
utiliza el truco Alt+Enter y selecciona "Inicializar

00:02:10.446 --> 00:02:14.366 align:middle
propiedades" para crear esa
propiedad y establecerla: De vuelta a

00:02:15.346 --> 00:02:20.906 align:middle
onAuthenticationSuccess(), necesitamos
devolver null o un Response. Devuelve un nuevo

00:02:23.036 --> 00:02:26.476 align:middle
RedirectResponse() y, para la URL,
di $this->router->generate() y

00:02:26.706 --> 00:02:31.806 align:middle
pasa app_homepage: Déjame ir...

00:02:32.776 --> 00:02:33.866 align:middle
vuelve a comprobar que el nombre de la ruta

00:02:33.866 --> 00:02:35.286 align:middle
.... debería estar

00:02:35.616 --> 00:02:37.886 align:middle
dentro de QuestionController.
¡Sí! app_homepage es

00:02:38.646 --> 00:02:41.566 align:middle
correcta: No estoy seguro de

00:02:42.146 --> 00:02:45.356 align:middle
por qué PhpStorm cree que falta esta
ruta... definitivamente está ahí. De

00:02:45.636 --> 00:02:46.806 align:middle
todos modos, vamos a entrar

00:02:47.776 --> 00:02:50.276 align:middle
desde cero. Vamos directamente a

00:02:50.676 --> 00:02:56.256 align:middle
/login, introducimos
abraca_admin@example.com - porque es un

00:02:56.646 --> 00:03:01.116 align:middle
correo electrónico real en nuestra base de datos
- y la contraseña "tada". Cuando enviamos...

00:03:02.386 --> 00:03:03.586 align:middle
¡funciona! ¡ Somos

00:03:04.096 --> 00:03:06.666 align:middle
redirigidos! ¡ Y estamos

00:03:07.026 --> 00:03:08.686 align:middle
conectados! Lo sé gracias a

00:03:09.196 --> 00:03:11.716 align:middle
la barra de herramientas de
depuración de la web: conectado como

00:03:12.086 --> 00:03:17.006 align:middle
abraca_admin@example.com ,
autentificado: Sí. Si haces clic en

00:03:17.866 --> 00:03:20.576 align:middle
este icono para entrar en el perfil, hay un

00:03:20.946 --> 00:03:24.586 align:middle
montón de información
jugosa sobre la seguridad.

00:03:25.186 --> 00:03:28.946 align:middle
Hablaremos de las partes más importantes a
medida que avancemos. Vuelve a hacer clic en

00:03:29.816 --> 00:03:30.986 align:middle
la página de inicio. Fíjate en que, si

00:03:31.616 --> 00:03:35.786 align:middle
navegamos por el sitio, seguimos
conectados... que es lo que

00:03:36.106 --> 00:03:37.286 align:middle
queremos. Esto funciona porque

00:03:38.086 --> 00:03:42.756 align:middle
los cortafuegos de Symfony son, por
defecto, "stateful". Es una forma elegante

00:03:43.486 --> 00:03:46.886 align:middle
de decir que, al final de
cada petición, el objeto User

00:03:47.136 --> 00:03:50.116 align:middle
se guarda en la sesión. Luego , al

00:03:50.846 --> 00:03:55.986 align:middle
inicio de la siguiente petición, ese objeto
User se carga desde la sesión... y seguimos

00:03:56.156 --> 00:03:57.956 align:middle
conectados. ¡Esto funciona muy bien!

00:03:58.846 --> 00:04:00.836 align:middle
Pero ... hay

00:04:01.236 --> 00:04:04.416 align:middle
un problema potencial.
Imagina que nos conectamos

00:04:05.066 --> 00:04:07.686 align:middle
en el ordenador del trabajo. Luego, nos vamos

00:04:08.246 --> 00:04:14.486 align:middle
a casa, iniciamos la sesión en un ordenador totalmente distinto y
cambiamos algunos de nuestros datos de usuario, como por ejemplo,

00:04:15.046 --> 00:04:20.586 align:middle
cambiamos nuestro firstName en la base de datos a
través de una sección de "edición de perfil". Cuando

00:04:21.376 --> 00:04:26.256 align:middle
volvamos al trabajo al día siguiente y actualicemos el
sitio, Symfony cargará, por supuesto, el objeto User

00:04:26.486 --> 00:04:28.986 align:middle
de la sesión. Pero... ¡ese objeto User

00:04:29.836 --> 00:04:34.316 align:middle
tendrá ahora el firstName
equivocado! Sus datos

00:04:34.896 --> 00:04:38.316 align:middle
ya no coincidirán con lo que hay en la
base de datos... porque estamos recargando

00:04:38.776 --> 00:04:43.086 align:middle
un objeto "viejo" de la
sesión. Afortunadamente... esto

00:04:43.976 --> 00:04:45.006 align:middle
no es

00:04:45.216 --> 00:04:47.846 align:middle
un problema real. ¿Por qué? Porque al

00:04:48.506 --> 00:04:54.916 align:middle
principio de cada petición, Symfony también
refresca el usuario. Bueno, en realidad nuestro

00:04:55.646 --> 00:04:58.406 align:middle
"proveedor de usuarios" hace
esto. Volviendo a security.yaml,

00:04:59.116 --> 00:05:03.616 align:middle
¿recuerdas esa cosa del
proveedor de usuarios? Sí, tiene

00:05:04.206 --> 00:05:06.216 align:middle
dos funciones. En primer lugar, si le damos

00:05:06.916 --> 00:05:11.016 align:middle
un correo electrónico, sabe cómo
encontrar a ese usuario. Si sólo le

00:05:11.906 --> 00:05:17.936 align:middle
pasamos un único argumento a UserBadge, el proveedor
de usuarios hace el trabajo duro de cargar el

00:05:17.936 --> 00:05:20.216 align:middle
User desde la base de datos:
Pero el proveedor de usuarios

00:05:20.916 --> 00:05:24.496 align:middle
también tiene un segundo trabajo. Al comienzo

00:05:25.186 --> 00:05:31.576 align:middle
de cada petición , refresca el User consultando la base
de datos para obtener datos frescos. Todo esto ocurre

00:05:32.546 --> 00:05:35.526 align:middle
automáticamente en segundo
plano.... ¡lo cual es genial! Es

00:05:35.636 --> 00:05:37.186 align:middle
un proceso aburrido,

00:05:37.616 --> 00:05:42.596 align:middle
pero crítico, del que tú, al menos,
deberías ser consciente. Ah, y por

00:05:43.446 --> 00:05:49.476 align:middle
cierto: tras la consulta de los datos frescos de
User, si algunos datos importantes del usuario

00:05:49.476 --> 00:05:57.406 align:middle
cambian -como los de email, password o roles
-, se te cerrará la sesión. Se trata de una

00:05:58.106 --> 00:06:05.296 align:middle
función de seguridad: permite que un usuario, por ejemplo, cambie su
contraseña y haga que se cierre la sesión de cualquier usuario "malo" que

00:06:05.296 --> 00:06:10.086 align:middle
haya podido acceder a su cuenta. Si quieres

00:06:10.936 --> 00:06:16.346 align:middle
saber más sobre esto, busca EquatableInterface:
es una interfaz que te permite

00:06:16.346 --> 00:06:18.876 align:middle
controlar este proceso. Averigüemos

00:06:19.756 --> 00:06:22.456 align:middle
qué ocurre cuando falla la
autenticación. ¿A dónde va el

00:06:22.906 --> 00:06:24.086 align:middle
usuario? ¿Cómo se muestran los errores

00:06:24.346 --> 00:06:25.986 align:middle
? ¿Cómo trataremos

00:06:26.376 --> 00:06:29.456 align:middle
la carga emocional del
fracaso? La mayor parte de eso

00:06:30.146 --> 00:06:31.876 align:middle
es lo siguiente
