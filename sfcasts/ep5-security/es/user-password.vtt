WEBVTT

00:00:01.086 --> 00:00:05.296 align:middle
A Symfony no le importa realmente si los
usuarios de tu sistema tienen contraseñas o no.

00:00:05.856 --> 00:00:12.176 align:middle
Si estás construyendo un sistema de inicio de sesión que lee las
claves de la API desde una cabecera, entonces no hay contraseñas.

00:00:12.876 --> 00:00:16.056 align:middle
Lo mismo ocurre si tienes
algún tipo de sistema SSO.

00:00:16.576 --> 00:00:18.806 align:middle
Tus usuarios pueden tener contraseñas...

00:00:18.946 --> 00:00:21.296 align:middle
pero las introducen en otro sitio.

00:00:22.046 --> 00:00:25.396 align:middle
Pero para nosotros, sí queremos que
cada usuario tenga una contraseña.

00:00:25.986 --> 00:00:30.406 align:middle
Cuando usamos antes el comando
make:user, en realidad nos preguntó

00:00:30.546 --> 00:00:33.416 align:middle
si queríamos que nuestros
usuarios tuvieran contraseñas.

00:00:33.816 --> 00:00:35.086 align:middle
Respondimos que no...

00:00:35.436 --> 00:00:38.126 align:middle
para poder hacer todo esto manualmente.

00:00:38.576 --> 00:00:42.396 align:middle
Pero en un proyecto real, yo
respondería que sí para ahorrar tiempo.

00:00:43.176 --> 00:00:46.956 align:middle
Sabemos que todas las clases de usuario
deben implementar UserInterface:

00:00:47.446 --> 00:00:51.216 align:middle
Entonces, si necesitas comprobar las
contraseñas de los usuarios en tu aplicación,

00:00:51.386 --> 00:00:57.926 align:middle
también tienes que implementar una segunda
interfaz llamada PasswordAuthenticatedUserInterface:

00:00:58.676 --> 00:01:02.456 align:middle
Esto requiere que tengas un
nuevo método: getPassword().

00:01:03.186 --> 00:01:07.286 align:middle
Si estás usando Symfony 6, no tendrás
esto todavía, así que añádelo:

00:01:07.286 --> 00:01:12.646 align:middle
Yo lo tengo porque estoy usando Symfony
5 y el método getPassword() es necesario

00:01:12.646 --> 00:01:17.246 align:middle
por compatibilidad con versiones anteriores:
antes formaba parte de UserInterface.

00:01:18.096 --> 00:01:20.296 align:middle
Ahora que nuestros usuarios
tendrán una contraseña,

00:01:20.556 --> 00:01:23.786 align:middle
y que estamos implementando
PasswordAuthenticatedUserInterface, voy a

00:01:24.236 --> 00:01:27.066 align:middle
eliminar este comentario sobre el método:

00:01:27.926 --> 00:01:30.836 align:middle
Vale, olvidémonos de la
seguridad por un momento.

00:01:31.316 --> 00:01:34.866 align:middle
En su lugar, céntrate en el hecho
de que tenemos que ser capaces de

00:01:34.866 --> 00:01:38.986 align:middle
almacenar una contraseña única para
cada usuario en la base de datos.

00:01:39.676 --> 00:01:43.436 align:middle
¡Esto significa que nuestra entidad
de usuario necesita un nuevo campo!

00:01:44.176 --> 00:01:50.256 align:middle
Busca tu terminal y ejecuta: symfony console
make:entity Vamos a actualizar la entidad User,

00:01:50.816 --> 00:01:53.216 align:middle
para añadir un nuevo campo llamado password...

00:01:53.876 --> 00:01:58.016 align:middle
que es una cadena, 255 de longitud
es exagerado, pero está bien...

00:01:58.446 --> 00:02:00.356 align:middle
y luego di "no" a anulable.

00:02:00.976 --> 00:02:01.966 align:middle
Pulsa enter para terminar.

00:02:02.846 --> 00:02:05.026 align:middle
De vuelta en la clase User, es...

00:02:05.026 --> 00:02:06.796 align:middle
en su mayor parte no es sorprendente.

00:02:07.246 --> 00:02:08.856 align:middle
Tenemos una nueva propiedad $password...

00:02:09.246 --> 00:02:12.526 align:middle
y al final, un nuevo método setPassword():

00:02:13.146 --> 00:02:16.496 align:middle
Fíjate que no ha generado
un método getPassword()...

00:02:16.786 --> 00:02:18.796 align:middle
porque ya teníamos uno.

00:02:19.396 --> 00:02:23.056 align:middle
Pero tenemos que actualizarlo para
que devuelva $this->password:

00:02:23.956 --> 00:02:26.756 align:middle
Algo muy importante sobre
esta propiedad $password

00:02:27.006 --> 00:02:30.636 align:middle
no va a almacenar la
contraseña en texto plano.

00:02:31.046 --> 00:02:33.926 align:middle
¡Nunca almacenes la
contraseña en texto plano!

00:02:34.476 --> 00:02:37.036 align:middle
Esa es la forma más rápida de
tener una brecha de seguridad...

00:02:37.146 --> 00:02:38.216 align:middle
y de perder amigos.

00:02:39.116 --> 00:02:43.056 align:middle
En su lugar, vamos a almacenar una
versión cifrada de la contraseña...

00:02:43.456 --> 00:02:46.866 align:middle
y veremos cómo generar esa
contraseña cifrada en un minuto.

00:02:47.546 --> 00:02:54.456 align:middle
Pero primero, vamos a hacer la migración para la nueva
propiedad: symfony console make:migration Ve a echar un

00:02:54.456 --> 00:02:59.426 align:middle
vistazo a ese archivo para asegurarte
de que todo está bien: Y...

00:03:00.376 --> 00:03:02.926 align:middle
¡lo está! Ciérralo...

00:03:03.316 --> 00:03:10.126 align:middle
y ejecútalo: symfony console
doctrine:migrations:migrate ¡Perfecto!

00:03:11.046 --> 00:03:14.216 align:middle
Ahora que nuestros usuarios tienen una nueva
columna de contraseña en la base de datos, vamos a

00:03:14.436 --> 00:03:16.626 align:middle
rellenarla en nuestros accesorios.

00:03:18.046 --> 00:03:22.356 align:middle
Abre src/Factory/UserFactory.php
y busca getDefaults().

00:03:23.146 --> 00:03:28.566 align:middle
De nuevo, lo que no vamos a hacer es establecer
en password la contraseña en texto plano.

00:03:29.046 --> 00:03:33.706 align:middle
No, esa propiedad password tiene que almacenar
la versión cifrada de la contraseña.

00:03:34.596 --> 00:03:37.266 align:middle
Abre config/packages/security.yaml.

00:03:39.706 --> 00:03:45.616 align:middle
Esto tiene un poco de configuración en la parte
superior llamada password_hashers, que le dice a Symfony

00:03:45.616 --> 00:03:50.466 align:middle
qué algoritmo de hash debe utilizar para
el hash de las contraseñas de los usuarios:

00:03:51.246 --> 00:03:57.096 align:middle
Esta configuración dice que cualquier clase de User
que implemente PasswordAuthenticatedUserInterface -

00:03:57.546 --> 00:04:04.916 align:middle
lo que nuestra clase, por supuesto, hace - utilizará
el algoritmo auto donde Symfony elige el último

00:04:04.916 --> 00:04:07.386 align:middle
y mejor algoritmo automáticamente. Gracias

00:04:08.316 --> 00:04:12.676 align:middle
a esta configuración, tenemos acceso
a un servicio "hasher" que es capaz

00:04:12.676 --> 00:04:17.996 align:middle
de convertir una contraseña de texto plano en
una versión hash utilizando este algoritmo auto.

00:04:18.846 --> 00:04:22.856 align:middle
De vuelta a UserFactory, podemos utilizarlo
para establecer la propiedad password:

00:04:23.786 --> 00:04:29.626 align:middle
En el constructor, añade un nuevo argumento:
UserPasswordHasherInterface $passwordHasher.

00:04:29.626 --> 00:04:34.976 align:middle
Pulsaré Alt+Enter e iré a "Inicializar propiedades"
para crear esa propiedad y establecerla: A continuación,

00:04:36.976 --> 00:04:42.626 align:middle
podemos establecer password a
$this->passwordHasher->hashPassword() y luego

00:04:43.026 --> 00:04:46.156 align:middle
pasarle alguna cadena de
texto plano. Bueno ... para

00:04:47.016 --> 00:04:48.286 align:middle
ser sincero... aunque

00:04:48.516 --> 00:04:51.706 align:middle
espero que esto tenga sentido
a alto nivel... esto no

00:04:51.936 --> 00:04:58.706 align:middle
funcionará del todo porque el primer argumento
de hashPassword() es el objeto User... que

00:04:58.986 --> 00:05:02.026 align:middle
aún no tenemos dentro de
getDefaults(). No pasa nada

00:05:02.776 --> 00:05:07.186 align:middle
porque , de todas formas, me gusta crear
una propiedad plainPassword en User para

00:05:07.346 --> 00:05:09.776 align:middle
facilitar todo esto. Añadamos

00:05:10.646 --> 00:05:13.156 align:middle
eso a continuación, terminemos
las fijaciones y actualicemos

00:05:13.506 --> 00:05:16.196 align:middle
nuestro autentificador para
validar la contraseña. Ah, pero

00:05:16.716 --> 00:05:22.176 align:middle
no te preocupes: esa nueva propiedad plainPassword
no se almacenará en la base de datos
