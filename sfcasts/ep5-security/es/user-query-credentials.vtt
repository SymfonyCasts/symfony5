WEBVTT

00:00:01.016 --> 00:00:05.816 align:middle
En la pantalla, vemos un dd() de la contraseña
que introduje en el formulario de acceso

00:00:06.086 --> 00:00:09.686 align:middle
y el objeto de entidad User para el correo electrónico
que introduje. ¡ Algo, de alguna manera, supo

00:00:10.216 --> 00:00:15.786 align:middle
tomar el correo electrónico introducido y consultar
por el Usuario! Así es como funciona esto.

00:00:16.646 --> 00:00:18.476 align:middle
Después de que devolvamos

00:00:19.016 --> 00:00:22.916 align:middle
el objeto Passport, el sistema de
seguridad intenta encontrar el objeto

00:00:22.916 --> 00:00:25.946 align:middle
User a partir de UserBadge. Si sólo

00:00:26.786 --> 00:00:30.326 align:middle
pasas un argumento a UserBadge
-como hacemos nosotros-,

00:00:30.816 --> 00:00:34.456 align:middle
lo hace aprovechando nuestro proveedor
de usuarios. ¿Recuerdas esa cosa

00:00:35.146 --> 00:00:38.296 align:middle
de security.yaml llamada
providers? Como nuestra clase User

00:00:39.036 --> 00:00:44.726 align:middle
es una entidad, estamos utilizando el
proveedor entity que sabe cómo cargar usuarios

00:00:44.726 --> 00:00:47.216 align:middle
utilizando la propiedad
email. Así que, básicamente,

00:00:48.126 --> 00:00:51.456 align:middle
se trata de un objeto que es
muy bueno para consultar la

00:00:51.456 --> 00:00:54.626 align:middle
tabla de usuarios a través de la
propiedad email. Así que cuando

00:00:55.146 --> 00:00:57.806 align:middle
pasamos sólo el correo electrónico
a UserBadge, el proveedor de usuarios

00:00:58.116 --> 00:01:01.386 align:middle
lo utiliza para consultar User.
Si se encuentra un objeto User

00:01:02.146 --> 00:01:09.216 align:middle
, Symfony intenta entonces "comprobar las credenciales"
de nuestro pasaporte. Como estamos utilizando

00:01:10.016 --> 00:01:15.026 align:middle
CustomCredentials , esto significa que ejecuta
esta llamada de retorno... en la que volcamos

00:01:15.346 --> 00:01:16.966 align:middle
algunos datos. Si no se encuentra un User

00:01:17.746 --> 00:01:22.466 align:middle
- porque hemos introducido un correo
electrónico que no está en la base de datos

00:01:22.466 --> 00:01:25.406 align:middle
- la autenticación falla. Pronto
veremos más sobre estas dos

00:01:26.176 --> 00:01:28.816 align:middle
situaciones. En cualquier caso, la cuestión

00:01:29.676 --> 00:01:35.246 align:middle
es la siguiente: si sólo pasas un argumento
a UserBadge, el proveedor de usuarios

00:01:35.536 --> 00:01:38.916 align:middle
carga el usuario automáticamente.
Eso es lo más fácil de

00:01:39.776 --> 00:01:42.116 align:middle
hacer. E incluso puedes

00:01:42.716 --> 00:01:48.536 align:middle
personalizar un poco esta consulta si lo necesitas - busca
"Usar una consulta personalizada para cargar el usuario

00:01:48.536 --> 00:01:51.086 align:middle
" en los documentos de Symfony
para ver cómo hacerlo. O... puedes

00:01:51.916 --> 00:01:56.916 align:middle
escribir tu propia lógica personalizada para
cargar el usuario aquí mismo. Para ello, vamos a

00:01:57.846 --> 00:02:00.886 align:middle
necesitar el UserRepository.
En la parte superior de

00:02:01.766 --> 00:02:05.416 align:middle
la clase, añade public function
__construct()... y autoconduce un

00:02:05.876 --> 00:02:08.666 align:middle
argumentoUserRepository. Pulsaré Alt+Enter

00:02:09.346 --> 00:02:13.766 align:middle
y seleccionaré "Inicializar propiedades" para crear esa
propiedad y establecerla: En authenticate(), UserBadge tiene

00:02:14.616 --> 00:02:21.326 align:middle
un segundo argumento opcional llamado cargador
de usuario. Pásale una llamada de retorno con

00:02:22.146 --> 00:02:26.016 align:middle
un argumento: $userIdentifier:
Es bastante sencillo: si

00:02:26.866 --> 00:02:32.356 align:middle
le pasas un callable, cuando Symfony
cargue tu User, llamará a esta función

00:02:32.746 --> 00:02:37.196 align:middle
en lugar de a tu proveedor de usuario.
Nuestro trabajo aquí es cargar el usuario

00:02:37.916 --> 00:02:41.066 align:middle
y devolverlo. El $userIdentifier será lo que

00:02:41.746 --> 00:02:47.686 align:middle
hayamos pasado al primer argumento de
UserBadge... así que el email en nuestro

00:02:47.976 --> 00:02:49.606 align:middle
caso. Digamos que $user =
$this->userRepository->findOneBy() para

00:02:50.586 --> 00:02:58.796 align:middle
consultar email se ajusta a
$userIdentifier: Aquí es donde puedes

00:02:59.746 --> 00:03:03.186 align:middle
utilizar cualquier consulta personalizada
que quieras. Si no podemos encontrar al

00:03:04.166 --> 00:03:08.446 align:middle
usuario, tenemos que lanzar una excepción
especial. Así que si no es $user, throw

00:03:08.946 --> 00:03:13.956 align:middle
new UserNotFoundException() . Eso
hará que falle la autenticación

00:03:14.376 --> 00:03:16.886 align:middle
. Al final, devuelve $user:

00:03:17.876 --> 00:03:19.826 align:middle
Esto... es básicamente idéntico a

00:03:20.906 --> 00:03:26.376 align:middle
lo que hacía nuestro proveedor de usuarios
hace un minuto... así que no cambiará nada.

00:03:26.516 --> 00:03:28.186 align:middle
Pero puedes ver que

00:03:29.146 --> 00:03:33.466 align:middle
tenemos el poder de cargar el User como
queramos. Actualicemos. Sí El mismo volcado

00:03:34.206 --> 00:03:35.246 align:middle
que

00:03:36.976 --> 00:03:38.766 align:middle
antes. Bien, si se encuentra un objeto User

00:03:39.676 --> 00:03:45.646 align:middle
-ya sea desde nuestra devolución de llamada personalizada o desde
el proveedor de usuarios- Symfony comprueba a continuación nuestras

00:03:45.886 --> 00:03:51.536 align:middle
credenciales, lo que significa algo diferente
dependiendo del objeto de credenciales que pases.

00:03:51.536 --> 00:03:54.536 align:middle
Hay 3 principales:

00:03:55.276 --> 00:04:02.506 align:middle
PasswordCredentials - un SelfValidatingPassport
que sirve para la autenticación de la API

00:04:02.746 --> 00:04:08.906 align:middle
y no necesita ninguna credencial - y
CustomCredentials. Si usas CustomCredentials, Symfony

00:04:09.716 --> 00:04:13.226 align:middle
ejecuta la llamada de
retorno... y nuestro trabajo es

00:04:13.646 --> 00:04:16.646 align:middle
"comprobar sus credenciales"... sea lo
que sea que eso signifique en nuestra

00:04:17.106 --> 00:04:19.256 align:middle
aplicación. El argumento
$credentials coincidirá con

00:04:19.256 --> 00:04:25.946 align:middle
lo que hayamos pasado al segundo argumento de
CustomCredentials. Para nosotros, eso es la contraseña enviada:

00:04:26.486 --> 00:04:28.466 align:middle
¡Imaginemos que todos los usuarios

00:04:29.276 --> 00:04:32.816 align:middle
tienen la misma contraseña tada!
Para validarlo, devuelve true

00:04:33.646 --> 00:04:38.726 align:middle
si $credentials === 'tada':
¡Seguridad hermética! Si devolvemos

00:04:39.576 --> 00:04:40.786 align:middle
true desde

00:04:41.816 --> 00:04:46.256 align:middle
esta función, ¡la autenticación es correcta!
¡Guau! Si devolvemos false, la autenticación

00:04:46.576 --> 00:04:50.616 align:middle
falla. Para comprobarlo, baja

00:04:51.546 --> 00:04:56.756 align:middle
a onAuthenticationSuccess() y
dd('success'). Haz lo mismo dentro de

00:04:57.446 --> 00:05:00.756 align:middle
onAuthenticationFailure():
Pronto pondremos código real en

00:05:01.646 --> 00:05:04.246 align:middle
estos métodos... pero su propósito

00:05:04.716 --> 00:05:09.916 align:middle
se explica por sí mismo: si la autenticación tiene
éxito, Symfony llamará a onAuthenticationSuccess(). Si

00:05:10.406 --> 00:05:13.116 align:middle
la autenticación falla por cualquier

00:05:14.086 --> 00:05:19.736 align:middle
motivo - como un correo electrónico o una contraseña no
válidos - Symfony llamará a onAuthenticationFailure().

00:05:20.076 --> 00:05:22.646 align:middle
¡Vamos a probarlo!

00:05:23.486 --> 00:05:23.986 align:middle
Vuelve directamente a /login.

00:05:23.986 --> 00:05:26.126 align:middle
Utiliza de nuevo el correo electrónico real

00:05:27.056 --> 00:05:28.716 align:middle
- abraca_admin@example.com
con la contraseña correcta:

00:05:29.086 --> 00:05:34.326 align:middle
tada. Envía y... ¡sí! llamó a onAuthenticationSuccess(). 

00:05:35.346 --> 00:05:36.586 align:middle
¡La autenticación se ha completado!

00:05:36.906 --> 00:05:39.886 align:middle
Lo sé,

00:05:43.346 --> 00:05:45.866 align:middle
todavía no parece gran cosa... así
que a continuación, vamos a hacer algo

00:05:46.076 --> 00:05:51.616 align:middle
en caso de éxito, como redirigir
a otra página. También vamos a

00:05:52.416 --> 00:05:56.586 align:middle
conocer el otro trabajo crítico de un proveedor
de usuarios: refrescar el usuario de la

00:05:57.036 --> 00:06:02.816 align:middle
sesión al principio de cada
petición para mantenernos conectados
